import nerd.tuxmobil.fahrplan.congress.Android
import nerd.tuxmobil.fahrplan.congress.Libs

ext.set("APP_VERSION", "${gitSha()}")

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "de.mobilej.unmock"
apply from: "../gradle/sonarqube.gradle"

android {
    compileSdkVersion Android.compileSdkVersion
    buildToolsVersion Android.buildToolsVersion

    defaultConfig {
        versionCode 82
        versionName "1.50.0"
        minSdkVersion Android.minSdkVersion
        targetSdkVersion Android.targetSdkVersion
        archivesBaseName = "Fahrplan-$versionName"

        vectorDrawables.useSupportLibrary = true

        // Build information
        resValue("string", "build_time", "\"${buildTime()}\"")
        resValue("string", "git_sha", "\"${gitSha()}\"")

        // Build configuration / feature flags
        buildConfigField "String", "SOURCE_CODE_URL", "\"https://github.com/EventFahrplan/EventFahrplan\""
        buildConfigField "String", "ISSUES_URL", "\"https://github.com/EventFahrplan/EventFahrplan/issues\""
        buildConfigField "String", "DATA_PRIVACY_STATEMENT_DE_URL", "\"https://github.com/EventFahrplan/EventFahrplan/blob/master/DATA-PRIVACY-DE.md\""
        resValue("string", "preference_hint_engelsystem_json_export_url", "\"\"")
        buildConfigField "String", "C3NAV_URL", "\"\""
        buildConfigField "boolean", "ENABLE_ALTERNATIVE_SCHEDULE_URL", "true"
        buildConfigField "boolean", "ENABLE_CHAOSFLIX_EXPORT", "true"
        buildConfigField "boolean", "ENABLE_ENGELSYSTEM_SHIFTS", "false"
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            zipAlignEnabled true
            debuggable true
            testCoverageEnabled true
        }
        release {
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules/proguard-project.txt',
                    'proguard-rules/okhttp3.pro',
                    'proguard-rules/okio.pro'
        }
    }

    signingConfigs {
        cccamp2019
        ccc36c3
        rc3
    }

    def defaultDimension = "default"
    flavorDimensions defaultDimension

    productFlavors {
        cccamp2019 {
            dimension defaultDimension
            applicationId "info.metadude.android.cccamp.schedule"
            versionName "1.50.0-CCCamp-Edition"
            buildConfigField "String", "GOOGLE_PLAY_URL", '"https://play.google.com/store/apps/details?id=info.metadude.android.cccamp.schedule"'
            buildConfigField "String", "SCHEDULE_URL", '"https://data.c3voc.de/camp2019/everything.schedule.xml"'
            buildConfigField "String", "EVENT_URL", '"http://events.ccc.de/camp/2019/Fahrplan/events/%1$s.html"'
            buildConfigField "String", "EVENT_WEBSITE_URL", '"http://events.ccc.de/camp/2019/"'
            buildConfigField "String", "SERVER_BACKEND_TYPE", '"frab"'
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_YEAR", "2019"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_MONTH", "8"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_DAY", "21"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_YEAR", "2019"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_MONTH", "8"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_DAY", "26"
            buildConfigField "boolean", "SHOW_APP_DISCLAIMER", "false"
            buildConfigField "boolean", "ENGAGE_C3NAV_APP_INSTALLATION", "false"
            buildConfigField "boolean", "ENGAGE_GOOGLE_BETA_TESTING", "true"
            buildConfigField "boolean", "ENGAGE_GOOGLE_PLAY_RATING", "true"
            buildConfigField "String", "TRACE_DROID_EMAIL_ADDRESS", '"tobias.preuss+camp2019@googlemail.com"'
            buildConfigField "String", "SCHEDULE_FEEDBACK_URL", '"https://frab.cccv.de/en/camp2019/public/events/%s/feedback/new"'
        }
        ccc36c3 {
            dimension defaultDimension
            applicationId "info.metadude.android.congress.schedule"
            buildConfigField "String", "GOOGLE_PLAY_URL", '"https://play.google.com/store/apps/details?id=info.metadude.android.congress.schedule"'
            buildConfigField "String", "SCHEDULE_URL", '"https://raw.githubusercontent.com/voc/36C3_schedule/master/everything.schedule.xml"'
            buildConfigField "String", "EVENT_URL", '"https://events.ccc.de/congress/2019/Fahrplan/events/%1$s.html"'
            buildConfigField "String", "EVENT_WEBSITE_URL", '"https://events.ccc.de/congress/2019/wiki"'
            buildConfigField "String", "SERVER_BACKEND_TYPE", '"frab"'
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_YEAR", "2019"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_MONTH", "12"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_DAY", "27"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_YEAR", "2019"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_MONTH", "12"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_DAY", "31"
            buildConfigField "boolean", "SHOW_APP_DISCLAIMER", "false"
            buildConfigField "boolean", "ENGAGE_C3NAV_APP_INSTALLATION", "true"
            buildConfigField "String", "C3NAV_URL", "\"https://36c3.c3nav.de/l/\""
            buildConfigField "boolean", "ENGAGE_GOOGLE_BETA_TESTING", "true"
            buildConfigField "boolean", "ENGAGE_GOOGLE_PLAY_RATING", "true"
            buildConfigField "boolean", "ENABLE_ENGELSYSTEM_SHIFTS", "true"
            resValue("string", "preference_hint_engelsystem_json_export_url", "\"https://engelsystem.de/36c3/shifts-json-export?key=YOUR_KEY\"")
            buildConfigField "String", "TRACE_DROID_EMAIL_ADDRESS", '"tobias.preuss+36c3@googlemail.com"'
            buildConfigField "String", "SCHEDULE_FEEDBACK_URL", '"https://frab.cccv.de/en/36C3/public/events/%s/feedback/new"'
        }
        rc3 {
            dimension defaultDimension
            applicationId "info.metadude.android.rc3.schedule"
            versionName "1.50.0-rC3-Edition"
            buildConfigField "String", "GOOGLE_PLAY_URL", '"https://play.google.com/store/apps/details?id=info.metadude.android.rc3.schedule"'
            buildConfigField "String", "SCHEDULE_URL", '"https://data.c3voc.de/rC3/everything.schedule.xml"'
            buildConfigField "String", "EVENT_URL", '"https://fahrplan.events.ccc.de/rc3/2020/Fahrplan/events/%1$s.html"'
            buildConfigField "String", "EVENT_WEBSITE_URL", '"https://rc3.world"'
            buildConfigField "String", "SERVER_BACKEND_TYPE", '"frab"'
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_YEAR", "2020"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_MONTH", "12"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_DAY", "27"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_YEAR", "2020"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_MONTH", "12"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_DAY", "31"
            buildConfigField "boolean", "SHOW_APP_DISCLAIMER", "false"
            buildConfigField "boolean", "ENGAGE_C3NAV_APP_INSTALLATION", "false"
            buildConfigField "boolean", "ENGAGE_GOOGLE_BETA_TESTING", "true"
            buildConfigField "boolean", "ENGAGE_GOOGLE_PLAY_RATING", "true"
            buildConfigField "boolean", "ENABLE_ENGELSYSTEM_SHIFTS", "true"
            resValue("string", "preference_hint_engelsystem_json_export_url", "\"https://engelsystem.de/rc3/shifts-json-export?key=YOUR_KEY\"")
            buildConfigField "String", "TRACE_DROID_EMAIL_ADDRESS", '"tobias.preuss+rc3@googlemail.com"'
            buildConfigField "String", "SCHEDULE_FEEDBACK_URL", '"https://frab.cccv.de/en/rc3/public/events/%s/feedback/new"'
        }
    }

    productFlavors.all { flavor ->
        if (hasSigningConfig(flavor.name)) {
            setSigningConfig(flavor)
        }
    }

    lintOptions {
        // for okio - https://github.com/square/okio/issues/58
        warning "InvalidPackage"
        warning "MissingDefaultResource"
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

unMock {
    keepStartingWith "libcore."
    keepStartingWith "org.ccil.cowan.tagsoup."
    keep "android.content.ComponentName"
    keep "android.content.Intent"
    keep "android.net.Uri"
    keepStartingWith "android.text."
    keep "android.os.Bundle"
    keep "android.util.Patterns"
    keep "com.android.internal.util.ArrayUtils"
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

dependencies {
    implementation project(":commons")
    implementation project(":database")
    implementation project(":network")
    implementation project(":engelsystem")

    implementation Libs.appCompat
    implementation Libs.betterLinkMovementMethod
    implementation Libs.constraintLayout
    implementation Libs.coreKtx
    implementation Libs.emailIntentBuilder
    implementation Libs.kotlinCoroutinesAndroid
    implementation Libs.kotlinCoroutinesCore
    implementation Libs.markwonCore
    implementation Libs.markwonLinkify
    implementation Libs.material
    implementation Libs.moshi
    kapt Libs.moshiCodeGen
    implementation Libs.okhttp
    implementation Libs.okhttpLoggingInterceptor
    implementation Libs.preference
    implementation Libs.snackengagePlayrate
    implementation Libs.tracedroid

    testImplementation project(":commons-testing")
    testImplementation Libs.annotation
    testImplementation Libs.assertjAndroid
    testImplementation Libs.junit
    testImplementation Libs.mockitoCore
    testImplementation Libs.threeTenBp
    testImplementation Libs.truth

    unmock Libs.robolectric
}

def gitSha() {
    def res = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
    def diff = 'git diff'.execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }
    return res
}

def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

def hasSigningConfig(String flavor) {
    return project.hasProperty("signing.$flavor-release.keystoreFilePath") &&
            project.hasProperty("signing.$flavor-release.keystorePassword") &&
            project.hasProperty("signing.$flavor-release.keyAlias") &&
            project.hasProperty("signing.$flavor-release.keyPassword")
}

def setSigningConfig(flavor) {
    def flavorName = flavor.name
    def props = project.getProperties()

    def signingConfig = android.signingConfigs[flavorName]
    signingConfig.storeFile file(props["signing.$flavorName-release.keystoreFilePath"])
    signingConfig.storePassword props["signing.$flavorName-release.keystorePassword"]
    signingConfig.keyAlias props["signing.$flavorName-release.keyAlias"]
    signingConfig.keyPassword props["signing.$flavorName-release.keyPassword"]

    flavor.signingConfig = signingConfig
}
